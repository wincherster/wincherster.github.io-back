{"meta":{"title":"张小程的个人博客","subtitle":null,"description":null,"author":"张小程","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Webpack底层实现原理","slug":"03-webpack底层实现原理","date":"2016-07-27T16:00:00.000Z","updated":"2017-10-17T08:17:28.582Z","comments":true,"path":"2016/07/28/03-webpack底层实现原理/","link":"","permalink":"http://yoursite.com/2016/07/28/03-webpack底层实现原理/","excerpt":"webpack是Web前端流行的项目打包工具，所以了解其底层实现的原理，能够在实际开发中更好的开展工作。","text":"webpack是Web前端流行的项目打包工具，所以了解其底层实现的原理，能够在实际开发中更好的开展工作。 Webpack的实现webpack的实现原理，是通过node.js的读取文件操作，将项目中src目录，自动生成dist目录，src目录中的所有js文件，最后生成一个build.js文件，将所有js代码封装在一个函数中，并使用数组对象形式的参数传递到这个函数中，内部通过require的方式，将文件进行关联，从而实现了代码的运行。","categories":[{"name":"编程原理","slug":"编程原理","permalink":"http://yoursite.com/categories/编程原理/"}],"tags":[{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/tags/Webpack/"}]},{"title":"盒子模型和弹性布局实现自适应布局","slug":"05-盒子模型和弹性盒子实现相应式布局","date":"2015-07-11T16:00:00.000Z","updated":"2017-10-18T05:55:54.486Z","comments":true,"path":"2015/07/12/05-盒子模型和弹性盒子实现相应式布局/","link":"","permalink":"http://yoursite.com/2015/07/12/05-盒子模型和弹性盒子实现相应式布局/","excerpt":"在常规的项目开发中，很多时候不使用响应式框架的前提下，都需要开发人员手动实现自适应，这个时候盒子模型的优势就体现了出来。盒子结构的合理嵌套，以及CSS样式的使用，就能实现简单的自适应布局。 常见的实现方式有2种: 使用简单的盒子模型的特性, 子盒子使用{ width:百分比; }实现比例缩放。 使用CSS的属性{ display:flex; },注意要定义在父盒子上，子盒子使用{ flex:数字; }实现比例。","text":"在常规的项目开发中，很多时候不使用响应式框架的前提下，都需要开发人员手动实现自适应，这个时候盒子模型的优势就体现了出来。盒子结构的合理嵌套，以及CSS样式的使用，就能实现简单的自适应布局。 常见的实现方式有2种: 使用简单的盒子模型的特性, 子盒子使用{ width:百分比; }实现比例缩放。 使用CSS的属性{ display:flex; },注意要定义在父盒子上，子盒子使用{ flex:数字; }实现比例。 举个例子: 现在需要实现如图1-1所示的自适应布局 父盒子中有两个子盒子 两个盒子的宽度比是2:1 支持响应式缩放 1.使用盒子模型实现首先实现页面的结构，父盒子中嵌套两个子盒子。然后所有div设置高度以便观察效果，根据要求的比例，计算两个盒子的百分比，子盒子设置不同的背景颜色。最后使用float属性，让两个子盒子处于一行。盒子模型的缺点是需要进行计算盒子的百分比，而且数值不会很精确（如果是大量的计算工作，开发效率会很低下）。 页面结构1234&lt;div class=\"big\"&gt; &lt;div class=\"one\"&gt;&lt;/div&gt; &lt;div class=\"two\"&gt;&lt;/div&gt;&lt;/div&gt; 页面样式12345678910111213141516div&#123; height:100px;&#125;.big&#123; border:1px solid yellow;&#125;.one&#123; width:66.666%; background-color: red; float:left;&#125;.two&#123; width:33.333%; background-color: blue; float:left;&#125; 2.使用弹性盒子实现不需要修改上面的页面结构，现在只需要将父盒子定义为{ display:flex; }弹性盒子，在子盒子中使用{ flex:数字; }定义各自的宽度比例即可，弹性盒子的优点是不需要进行计算盒子的百分比。 页面样式1234567891011121314151617div&#123; height:100px;&#125;.big&#123; display:flex; border:1px solid yellow;&#125;.one&#123; flex:2; background-color: red; float:left;&#125;.two&#123; flex:1; background-color: blue; float:left;&#125; 弹性盒子的实现方式明显优于盒子模型，不需要计算百分比，结果也更加精准。","categories":[{"name":"页面布局","slug":"页面布局","permalink":"http://yoursite.com/categories/页面布局/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"闭包的原理小结","slug":"02-闭包的原理","date":"2015-06-09T16:00:00.000Z","updated":"2017-10-17T16:35:08.406Z","comments":true,"path":"2015/06/10/02-闭包的原理/","link":"","permalink":"http://yoursite.com/2015/06/10/02-闭包的原理/","excerpt":"在理解闭包原理之前，首先要来回顾一下作用域的相关知识点。 作用域和闭包全局作用域和局部作用域的特点 全局作用域有命名冲突，声明多个同名变量，会互相覆盖。 函数内部的变量在函数被调用后，会被垃圾回收机制销毁，第二次调用函数变量值可能不同。 函数级别作用域（局部作用域）不存在命名冲突，即使多个函数内部声明同一个变量，也不会互相覆盖。","text":"在理解闭包原理之前，首先要来回顾一下作用域的相关知识点。 作用域和闭包全局作用域和局部作用域的特点 全局作用域有命名冲突，声明多个同名变量，会互相覆盖。 函数内部的变量在函数被调用后，会被垃圾回收机制销毁，第二次调用函数变量值可能不同。 函数级别作用域（局部作用域）不存在命名冲突，即使多个函数内部声明同一个变量，也不会互相覆盖。 闭包的原理 使用局部作用域（函数内部声明变量），防止命名冲突（全局变量污染）。 父函数的内部声明一个子函数去使用父函数中的变量，防止变量被回收。 父函数return 这个子函数，然后使用变量去接收return的子函数，让其他函数可以读取其内部的变量，但是不能修改。 闭包的作用闭包的作用实际上就是保存自己私有的变量，通过提供的接口（方法）给外部使用，但外部不能直接访问该变量。 使用案例来详细说明:123456789101112131415161718// 声明一个全局作用域var num1 = 1; function a1() &#123; // 声明1个局部作用域 var num2 = 2; function a2()&#123; // 声明1个局部作用域 var num3 = 3; // 返回 num2 + num3 的和 return num2 + num3; &#125; // 返回 a2 这个函数，实际就是 num2 + num3 的和 return a2; &#125;// 使用变量接收 a1的返回值 a2函数，实际num2 + num3 的和var num4 = a1(); // 控制台输出 num4的调用，实际是 num2 + num3 的和console.log(num4()); 上面的案例中，首先声明了一个全局变量 num1，紧接着声明函数a1，a1中声明局部变量 num2，然后又声明一个内部函数a2，同时a2中也声明了一个局部变量num3。现在一共有3个作用域， 全局作用域，a1作用域，a2作用域。a2函数要使用num2首先在自己内部查找，如果没找到就去父函数a1的作用域中查找，假如父函数a1没有就到全局作用域中查找，直到找到为止，这样就形成了作用域链。 注意：如果函数内部的变量在声明时没有使用 var ，这个变量就会提升为全局变量。","categories":[{"name":"编程原理","slug":"编程原理","permalink":"http://yoursite.com/categories/编程原理/"}],"tags":[{"name":"闭包","slug":"闭包","permalink":"http://yoursite.com/tags/闭包/"}]},{"title":"面向过程和面向对象思想小结","slug":"01-面向过程和面向对象思想","date":"2015-05-17T16:00:00.000Z","updated":"2017-10-17T09:11:17.224Z","comments":true,"path":"2015/05/18/01-面向过程和面向对象思想/","link":"","permalink":"http://yoursite.com/2015/05/18/01-面向过程和面向对象思想/","excerpt":"编程的基本思想坦率的讲编程的代码就像烹饪食谱里的说明文字，仅仅目的不同，一个为了编写程序，一个是为了烹饪美味。只要将需求分解成一步步可具体执行的代码或者说明，就能实现各自的目的。 面向过程和面向对象的思想在实际的编程中有两种应用比较广泛的思想，面向过程和面向对象。虽然都是编程的一种思想，面向过程注重的是通过代码一步步实现编程业务逻辑（食谱里的说明文字），面向对象更注重的是将编程过程中的属性和方法分离，使用构造函数创建相应的对象，并且添加原型方法实现相同的编程业务逻辑。","text":"编程的基本思想坦率的讲编程的代码就像烹饪食谱里的说明文字，仅仅目的不同，一个为了编写程序，一个是为了烹饪美味。只要将需求分解成一步步可具体执行的代码或者说明，就能实现各自的目的。 面向过程和面向对象的思想在实际的编程中有两种应用比较广泛的思想，面向过程和面向对象。虽然都是编程的一种思想，面向过程注重的是通过代码一步步实现编程业务逻辑（食谱里的说明文字），面向对象更注重的是将编程过程中的属性和方法分离，使用构造函数创建相应的对象，并且添加原型方法实现相同的编程业务逻辑。 面向过程编程的实现过程举个例子：假如要做道蛋炒饭，具体都有哪些步骤（编程思想），将要做的事情变成一个个具体的步骤去执行（面向过程）。 准备锅，鸡蛋，米饭，食用油，辅料，盘子 食用油放入锅中 食用油热后放入辅料 放入鸡蛋 放入米饭 出锅，盛盘 面向过程的代码如下：12345678910111213var content = document.getElementById('content');var g = \"锅\";var d = \"鸡蛋\" ;var m = \"米饭\" ;var s = \"食用油\" ;var f = \"辅料\" ;var p = \"盘子\";var div0 = document.createElement('div');var br0 = document.createElement('br');var fan = g+\"中放入\"+s+\"，\"+s+\"热后放入\"+f+\"，放入\"+d+\"，再放入\"+m+\"，出\"+g+\"盛入\"+p;div0.innerHTML = fan;content.appendChild(div0);content.appendChild(br0); 以上代码的思路就是面向过程，如果需要重新做一道菜，则需要重写代码去实现，所以面向过程的代码复用性较差。 面向对象编程的实现过程现在要实现烹饪多道菜（实现代码的复用性），以上的实现方式就不能满足这个要求了，这个时候就需要使用面向对象的思想实现业务逻辑。 自定义一个构造函数 ChaoCai 添加相关的烹饪属性 使用原型添加相关的方法 调用这个函数，同时传入参数， 调用方法，实现烹饪步骤 面向对象的代码如下：1234567891011121314151617181920212223var content = document.getElementById('content');function ChaoCai (g,d,m,s,f,p)&#123; this.g = g; this.d = d; this.m = m; this.s = s; this.f = f; this.p = p;&#125;ChaoCai.prototype.fang = function()&#123; var div = document.createElement('div'); var br = document.createElement('br'); var html = this.g+\"中放入\"+this.s+\"，\"+this.s+\"热后放入\"+this.f+\"，放入\" +this.d+\"，再放入\"+this.m+\"，从\"+this.g+\"盛入\"+this.p; div.innerHTML = html; content.appendChild(div); content.appendChild(br);&#125;var kaolengmian = new ChaoCai('铁板','鸡蛋','冷面','食用油','辅料','餐盒');kaolengmian.fang();var fan = new ChaoCai('锅','鸡蛋','米饭','食用油','辅料','盘子');fan.fang(); 综上所述，实现相同的业务逻辑，面向对象的实现方式明显比面向过程好很多，在需要多次使用相同代码的时候，不需要多次重复相同的事情，让编程工作变成了一项体力活，开发效率也不会太高，使用面向对象的方式编程开发，可以提升代码的复用性，使程序的性能有所提高。","categories":[{"name":"编程原理","slug":"编程原理","permalink":"http://yoursite.com/categories/编程原理/"}],"tags":[{"name":"面向对象","slug":"面向对象","permalink":"http://yoursite.com/tags/面向对象/"}]},{"title":"圣杯布局和双飞翼布局","slug":"04-圣杯布局和双飞翼布局","date":"2014-10-14T16:00:00.000Z","updated":"2017-10-18T05:28:38.064Z","comments":true,"path":"2014/10/15/04-圣杯布局和双飞翼布局/","link":"","permalink":"http://yoursite.com/2014/10/15/04-圣杯布局和双飞翼布局/","excerpt":"两个布局的异同首先我们先来看一下两个布局实现的页面效果 相同点相同点是两者的表现形式（视觉效果）上都是三栏布局，左右两栏宽度固定，中间部分自适应，也就是常说的固比固布局，需要注意的点如下: 中间的盒子优先渲染（要放在前面），宽度100%，两边的盒子宽度固定不变。 页面的宽度不能小于中间container的盒子宽度，所以body需要一个min-width最小宽度。 不同点不同点在于是通过什么原理（思想）去实现的，或者具体通过什么方式。","text":"两个布局的异同首先我们先来看一下两个布局实现的页面效果 相同点相同点是两者的表现形式（视觉效果）上都是三栏布局，左右两栏宽度固定，中间部分自适应，也就是常说的固比固布局，需要注意的点如下: 中间的盒子优先渲染（要放在前面），宽度100%，两边的盒子宽度固定不变。 页面的宽度不能小于中间container的盒子宽度，所以body需要一个min-width最小宽度。 不同点不同点在于是通过什么原理（思想）去实现的，或者具体通过什么方式。 两个布局具体的实现方式圣杯布局圣杯布局的出现是来自于a list part上的一篇文章In Search of the Holy Grail 圣杯布局的特点 两边的盒子固定宽度 { width: 200px }。 中间的盒子宽度自适应 { width: 100% }。 右侧盒子的 margin-left 负值是px单位，百分比单位实现不了。 左侧盒子的margin-left 负值是百分比单位（实际的距离是中间盒子的宽度）。 页面结构1234567891011&lt;div class=\"header\"&gt; &lt;span&gt; header内容区域 &lt;/span&gt;&lt;/div&gt;&lt;div class=\"container\"&gt; &lt;div class=\"middle\"&gt; 中间弹性盒子区域 &lt;/div&gt; &lt;div class=\"left\"&gt; 左边栏 &lt;/div&gt; &lt;div class=\"right\"&gt; 右边栏 &lt;/div&gt;&lt;/div&gt;&lt;div class=\"footer\"&gt; footer内容区域 &lt;/div&gt; 页面样式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748body &#123; margin:0; padding:0; text-align:center; /* 保证页面宽度不能小于1000px */ min-width:1000px;&#125;/* 圣杯布局 start */.header &#123; width:100%; height:50px; background-color:skyblue;&#125;.container &#123; height:200px; margin:0 200px; /* 这个也可以*/ /* padding:0 200px; */&#125;.middle &#123; width:100%; height:200px; background-color:red; float:left;&#125;.left &#123; width:200px; height:200px; background-color:gray; margin-left:-100%; float:left; position:relative; left:-200px;&#125;.right &#123; width:200px; height:200px; background-color:gray; margin-left:-200px; float:left; position:relative; right:-200px;&#125;.footer &#123; width:100%; height:50px; background-color:yellowgreen;&#125;/* 圣杯布局 end */ 圣杯布局中，两侧的盒子使用float和position属性配合，实现了三栏固比固的布局，还使用了margin-left负值来实现盒子的偏移，这样就能让两个盒子浮动在middle中间盒子上面，从而让中间盒子中的内容正常显示出来。 双飞翼布局双飞翼布局则是源于淘宝的UED,( 据说是玉伯大大提出来的)，灵感来自于页面渲染。 双飞翼布局的特点 页面结构和圣杯布局相同，但是在中间盒子内部加了一个盒子。 通过内部盒子的margin属性，将两侧盒子遮挡的位置空出来。 右侧盒子的margin-left负值是px单位，百分比单位实现不了。 左侧盒子的margin-left负值是百分比单位（实际的距离是中间盒子的宽度）。 页面结构12345678910111213&lt;div class=\"header\"&gt; &lt;span&gt;header内容区域&lt;/span&gt;&lt;/div&gt;&lt;div class=\"container\"&gt; &lt;div class=\"middle\"&gt; &lt;div class=\"middle-one\"&gt; 中间弹性盒子区域 &lt;/div&gt; &lt;/div&gt; &lt;div class=\"left\"&gt;左边栏&lt;/div&gt; &lt;div class=\"right\"&gt;右边栏&lt;/div&gt;&lt;/div&gt;&lt;div class=\"footer\"&gt;footer内容区域&lt;/div&gt; 页面样式12345678910111213141516171819202122232425262728293031323334353637383940414243body &#123; margin:0; padding:0; min-width:1000px; text-align:center;&#125;.header &#123; width:100%; height:50px; background-color: skyblue;&#125;.container &#123; width:100%; height:200px;&#125;.middle &#123; width:100%; height:200px; background-color: red; float:left;&#125;.middle-one &#123; margin: 0 200px;&#125;.left &#123; width:200px; height:200px; background-color: green; float:left; margin-left:-100%;&#125;.right &#123; width:200px; height:200px; background-color: green; float:left; margin-left:-200px;&#125;.footer &#123; width:100%; height:50px; background-color: yellow;&#125; 通过上面的代码实现过程，不难发现双飞翼和圣杯布局的实现，最本质的区别是中间盒子有一个内部盒子，有没有使用position属性配合float和margin-left负值，用来实现中间内容的正常显示。","categories":[{"name":"页面布局","slug":"页面布局","permalink":"http://yoursite.com/categories/页面布局/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"基于Hexo和Github搭建个人博客","slug":"00-使用Hexo搭建个人博客","date":"2014-10-09T16:00:00.000Z","updated":"2018-10-27T15:05:33.978Z","comments":true,"path":"2014/10/10/00-使用Hexo搭建个人博客/","link":"","permalink":"http://yoursite.com/2014/10/10/00-使用Hexo搭建个人博客/","excerpt":"通常搭建个人博客需要相应的服务和技术支持，包括购买服务器空间，域名，挑选服务器部署工具等。这些对技术新人和小白专业性要求很高，而且很不友好。如何最快速最简便的搭建个人静态博客，其实很简单。可以基于Github的开源服务替代服务器空间，使用git工具进行部署，域名也可以省去。搭建博客的技术栈很多，我采用的Hexo，因为主题和样式丰富，具体的操作步骤如下：","text":"通常搭建个人博客需要相应的服务和技术支持，包括购买服务器空间，域名，挑选服务器部署工具等。这些对技术新人和小白专业性要求很高，而且很不友好。如何最快速最简便的搭建个人静态博客，其实很简单。可以基于Github的开源服务替代服务器空间，使用git工具进行部署，域名也可以省去。搭建博客的技术栈很多，我采用的Hexo，因为主题和样式丰富，具体的操作步骤如下： 安装注意，因为我使用的是MAC 命令前加了sudo来用管理权限，WIN电脑不用写sudo安装Hexo需要Node.js和git，有这两个之后直接用命令行安装Hexo（PS：发现官网改命令了，回来更新下）1sudo npm install hexo-cli -g 初始化创建一个文件夹 在命令行中将目录定位在该文件夹中，输入下面的命令（注意啊，目录一定搞清楚）：12hexo init //初始化npm install 生成静态页面还是在该目录下执行命令：1sudo hexo generate // 可以简写为 hexo g 安装hexo-server插件：1sudo npm install hexo-server 本地启动：1hexo server //可简写为 hexo s 如果执行上面出错4000端口被占用，我们可以修改默认的端口在_config.yml文件最后添加下面这几段代码（几率很小） 1234server: port: 4000 compress: true header: true 如果还是报错的话，那么请确定你是否是在你创建的文件夹下，也就是你安装的hexo文件夹下运行的命令（PS：很简单一点就是看看在你运行命令的地方能不能看到_config.yml文件） 然后就是见证奇迹的时刻，在浏览器中输入 http://localhost:4000/ 。就可以看到啦！激动…但是…..到这里你的博客还只能自己看到。别人看不到啊，怎么办？？？ 接着往下看… 配置Github因为我是先研究的Github再研究的Hexo,所有Github早已经配置好啦，大概是这样的 新建一个仓库 这里要注意的是 新建仓库的名字必须是 你的用户名.github.io在刚才安装Hexo的文件夹下找到_config.yml文件，我们要对他进行修改了。（马上就可以让别人看到你的博客啦！）用编辑器打开这个文件 拉到最下面进行修改(注意啊，每个冒号后面都有一个空格，别踩坑！)1234deploy: type: git repository: 这里填写你的Github仓库地址（去你Github那里直接复制过来） branch: master （文件的其他参数，我后面有写，先不要急！）安装用来部署到git上的插件：1npm install hexo-deployer-git --save 执行部署（就跟项目上线差不多，执行了别人就能看到了，想好有没有BUG啊)1hexo deploy 问题汇总收到反馈，大部分人在部署这个地方出现了很多问题 问题1：报错出现1**place tell me who are you** 原因：可能是你第一次使用GitHub上传东西，所有要告诉他，你是谁，好吧，那就告诉他吧。（PS：运行下面命令，请注意，使用git bush运行。命令行可能会不识别） 解决：我是 git config –global user.name “yangyangyang”我的邮箱 git config –global user.email “yyy@qq.com”(PS: 你别真的把 我是。。。 我的邮箱。。打上去了)然后可以查看配置是否成功1git config --list 然后生成秘钥 ssh-keygen -t rsa -C “yyy@qq.com” 应该是连续按三四个回车就OK如果中间弹出个（y/n）输入个 y 接着回车然后注意反馈的命令里面的这一句1Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa) 括号后面的是路径，取那个路径取找 id_rsa.pub文件，记事本打开，复制里面的所有内容。接着去github点你的头像，然后点下拉中的 Settings 然后看左边有个SSH and GPG keys 点进去再点绿色的 New SSH key然后 title 随便输入一个 key 中粘贴你刚才复制的东西点击 下方绿色按钮 Add SSH key 好了 再回去执行 hexo deploy吧。 问题2：报错出现1error:failed to execute prompt script (exit code 1) 那么恭喜你，麻烦了。原因：我猜测是配置文件的问题，也就是上面我们配置_config.yml文件的时候，没有配置好。解决：检查你的配置文件1234deploy: type: git repository: 你仓库地址（HTTPS开头的） branch: master 看看格式是否正确 冒号后面必须跟空格，这几句的对齐方式也必须是这样的！！下面的缩进是两个空格，请不用使用 tab ！检查完没问题，好的，再去执行一遍hexo deploy，还是报错，那么接着试 把配置文件改成这样：123456deploy: type: git repo: 你仓库地址 （git开头的） branch: master name: 你github上的用户名 email: 你登陆github的邮箱 （PS：取仓库地址—-&gt; 登陆上去后，在右上角点你的github头像，下拉菜单中点your profile，然后找你刚才建的以你应户名然后.github.io结尾的仓库，点进去，右边有个绿色按钮，点击后，下拉的面板中左上角出现Clone with HTTPS,那下面的文本框中就是你以HTTPS开头的仓库地址，要使用git开头的，请点下拉面板中的右上角 Use SSH 然后复制下面的地址） 改完配置文件载执行 hexo deploy. 什么？还报错？ 那么我也没办法了！谷歌吧！ 大功告成！ 接下来就是见证奇迹时刻，在浏览器中输入 刚才你的仓库名 就是那个 你的用户名.github.io 总结一下：每次对主题、文件等就行了修改，需要三步才能让你的博客让别人看到 123hexo cleanhexo generatehexo deploy 要是感觉单词长 就这样写 12hexo cleanhexo g -d 一些常用的命令1234567hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 创建的文章，在source/_posts下，后缀是md，哦对了！这里面那个Helloworld.md那个文件可以删了,看到就想起来当初看java的时候，配置完环境，第一条输入的hello world！！ _config.yml 文件的一些参数说明123456title #网站的标题subtitle #网站的副标题description #网站的描述author #你的名字language #网站的语言。使用2-lettter ISO-639-1代码。默认是en。（有填写规范的，别乱写）timezone #网站的时区。Hexo默认使用计算机上的设置。你可以在这里找到可用的时区列表。一些例子是America/New_York，Japan和UTC。 （同上）","categories":[{"name":"知识管理","slug":"知识管理","permalink":"http://yoursite.com/categories/知识管理/"}],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"http://yoursite.com/tags/个人博客/"}]}]}